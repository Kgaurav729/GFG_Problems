One of the rudimentary problems to understand DP is finding the nth Fibonacci number. Here, we will solve the problem using a bottom-up approach.
You are given a number N. You need to find the Nth Fibonacci number.
Note: The first two number of the series are 0 and 1 i.e 0th fibonacci number is 0, 1st Fibonacci number is 1.

Example 1:

Input: N = 5
Output: 5
Explanation: Some of the numbers of the Fibonacci numbers are 0, 1, 1, 2, 3, 5, ..... So, starting the count from the 0th index, the 5th one is 5.
Example 2:

Input: N = 7
Output: 13
Explanation: Some of the numbers of the Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13 ..... So, starting the count from the 0th index, the 7th one is 13.
Your Task:
You don't need to take any input. You have to complete the function findNthFibonacci() which takes single argument(number N) and returns the answer.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= N <= 92




class Solution
{
    public:
    //Function to find the nth fibonacci number using bottom-up approach.
    long long findNthFibonacci(int number)
    {
        // Your Code Here
        long long fab[number+1];
        fab[0]=0;
        fab[1]=1;
        for(int i=2;i<=number;i++){
            fab[i]=fab[i-1]+fab[i-2];
        }
        return fab[number];
    }
};
