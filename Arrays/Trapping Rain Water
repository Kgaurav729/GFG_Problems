Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 
 

Example 1:

Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10
Explanation: 

Example 2:

Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.
Example 3:

Input:
N = 3
arr[] = {6,9,9}
Output:
0
Explanation:
No water will be trapped.

Your Task:
You don't need to read input or print anything. The task is to complete the function trappingWater() which takes arr[] and N as input parameters and returns the total amount of water that can be trapped.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
3 < N < 106
0 < Ai < 108


take right max value from right side of array . store it in the rightmax array
take left max value from left side of array and store it in the leftmax array

now take min of rightmax and leftmax array index wise and subtract from the original array 

make sure you also adding the difference in the sum variable which is the return value .


class Solution{

    // Function to find the trapped water between the blocks.
    public:
    long long trappingWater(int arr[], int n){
        // code here\
        
        if(n<=2){
            return 0;
        }
        long long leftmax[n],rightmax[n],ans;
        leftmax[0]=arr[0];
        for(int i=1;i<n;i++){
            leftmax[i]=max(leftmax[i-1],(long long)arr[i]);
        }
        rightmax[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--){
            rightmax[i]=max(rightmax[i+1],(long long)arr[i]);
        }
        
        long long sum=0;
        for(int i=0;i<n;i++){
            sum+=min(leftmax[i],rightmax[i])-arr[i];
        }
        return sum;
        
        
        
        
    }
};
